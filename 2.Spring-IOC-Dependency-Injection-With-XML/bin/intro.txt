IOC Container:-> The IoC container is responsible to instantiate, configure and assemble the objects. The IoC 
container gets informations from the XML file and works accordingly. The main tasks performed by IoC container are:
-> to instantiate the application class
-> to configure the object
-> to assemble the dependencies between the objects
there are two types of IOC Container:->
i. BeanFactory
ii. ApplicationContext

BeanFactory:-> The XmlBeanFactory is the implementation class for the BeanFactory interface. To use the BeanFactory,
we need to create the instance of XmlBeanFactory class as given below:
Resource resource=new ClassPathResource("applicationContext.xml");  
BeanFactory factory=new XmlBeanFactory(resource);  
The constructor of XmlBeanFactory class receives the Resource object so we need to pass the resource object to 
create the object of BeanFactory.

ApplicationContext:-> The ClassPathXmlApplicationContext class is the implementation class of ApplicationContext 
interface. We need to instantiate the ClassPathXmlApplicationContext class to use the ApplicationContext as given 
below:
ApplicationContext context =   new ClassPathXmlApplicationContext("applicationContext.xml");  
The constructor of ClassPathXmlApplicationContext class receives string, so we can pass the name of the xml file to
create the instance of ApplicationContext.

BeanFactory vs ApplicationContext:-> The org.springframework.beans.factory.BeanFactory and the 
org.springframework.context.ApplicationContext interfaces acts as the IoC container. The ApplicationContext 
interface is built on top of the BeanFactory interface. It adds some extra functionality than BeanFactory such as 
simple integration with Spring's AOP, message resource handling (for I18N), event propagation, application layer 
specific context (e.g. WebApplicationContext) for web application. So it is better to use ApplicationContext 
than BeanFactory.

Dependency Injection:-> Dependency Injection (DI) is a design pattern that removes the dependency from the 
programming code so that it can be easy to manage and test the application. Dependency Injection makes our 
programming code loosely coupled. To understand the DI better, Let's understand the Dependency Lookup (DL) first:

The Dependency Lookup is an approach where we get the resource after demand. There can be various ways to get the
 resource for example:
A obj = new AImpl();  
In such way, we get the resource(instance of A class) directly by new keyword. Another way is factory method:
A obj = A.getA();  
This way, we get the resource (instance of A class) by calling the static factory method getA().

There are mainly two problems of dependency lookup.
tight coupling:-> The dependency lookup approach makes the code tightly coupled. If resource is changed, we need to
 perform a lot of modification in the code.
Not easy for testing:-> This approach creates a lot of problems while testing the application especially in black 
box testing.

The Dependency Injection is a design pattern that removes the dependency of the programs. In such case we provide
the information from the external source such as XML file. It makes our code loosely coupled and easier for 
testing.

Spring framework provides two ways to inject dependency:->
i. By Constructor
ii. By Setter method


Constructor Dependency Injection Vs Setter Dependency Injection:->
i. Partial dependency: can be injected using setter injection but it is not possible by constructor. Suppose there
are 3 properties in a class, having 3 arg constructor and setters methods. In such case, if you want to pass
information for only one property, it is possible by setter method only.

ii. Overriding: Setter injection overrides the constructor injection. If we use both constructor and setter injection, 
IOC container will use the setter injection.

iii. Changes: We can easily change the value by setter injection. It doesn't create a new bean instance always like 
constructor. So setter injection is flexible than constructor injection.